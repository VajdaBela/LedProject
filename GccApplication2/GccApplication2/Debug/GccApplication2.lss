
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000266  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800120  00800120  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000307  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000174  00000000  00000000  000006d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000216  00000000  00000000  0000084b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00000a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a3  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002bd  00000000  00000000  00000cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 14 01 	call	0x228	; 0x228 <main>
  9e:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Shift>:
char text[] = "0";


void Shift(uint8_t state)
{
	if(state)
  a6:	88 23       	and	r24, r24
  a8:	11 f0       	breq	.+4      	; 0xae <Shift+0x8>
		PORTB |= (1 << SERIN);
  aa:	2d 9a       	sbi	0x05, 5	; 5
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <Shift+0xa>
	else
		PORTB &= ~(1 << SERIN);
  ae:	2d 98       	cbi	0x05, 5	; 5
		
	PORTC |= (1 << SRCK);
  b0:	45 9a       	sbi	0x08, 5	; 8
	PORTC &= ~(1 << SRCK);
  b2:	45 98       	cbi	0x08, 5	; 8
  b4:	08 95       	ret

000000b6 <clear>:
}


void clear()
{
  b6:	cf 93       	push	r28
  b8:	c0 e1       	ldi	r28, 0x10	; 16
	for(uint8_t br = 0; br < 16; ++br)
	{
		Shift(0);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 53 00 	call	0xa6	; 0xa6 <Shift>
  c0:	c1 50       	subi	r28, 0x01	; 1
}


void clear()
{
	for(uint8_t br = 0; br < 16; ++br)
  c2:	d9 f7       	brne	.-10     	; 0xba <clear+0x4>
	{
		Shift(0);
	}
}
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <SetBufer>:


void SetBufer()
{
  c8:	8f 92       	push	r8
  ca:	9f 92       	push	r9
  cc:	af 92       	push	r10
  ce:	bf 92       	push	r11
  d0:	cf 92       	push	r12
  d2:	df 92       	push	r13
  d4:	ef 92       	push	r14
  d6:	ff 92       	push	r15
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	27 97       	sbiw	r28, 0x07	; 7
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
	uint8_t temp[7] = {0};
  f0:	fe 01       	movw	r30, r28
  f2:	31 96       	adiw	r30, 0x01	; 1
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	df 01       	movw	r26, r30
  f8:	1d 92       	st	X+, r1
  fa:	8a 95       	dec	r24
  fc:	e9 f7       	brne	.-6      	; 0xf8 <SetBufer+0x30>
		}
		
		//set bufer
		for (uint8_t br1 = 0; br1 < 7; ++br1)
		{
			bufer[br1] = (temp[br1] << (shiftNum - 4));
  fe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <shiftNum>
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	24 50       	subi	r18, 0x04	; 4
 106:	31 09       	sbc	r19, r1


void SetBufer()
{
	uint8_t temp[7] = {0};
	for(uint8_t br = 0; br < strlen(text); ++br)
 108:	b1 2c       	mov	r11, r1
 10a:	0f 2e       	mov	r0, r31
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ef 2e       	mov	r14, r31
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	ff 2e       	mov	r15, r31
 114:	f0 2d       	mov	r31, r0
 116:	8f 01       	movw	r16, r30
 118:	be 01       	movw	r22, r28
 11a:	68 5f       	subi	r22, 0xF8	; 248
 11c:	7f 4f       	sbci	r23, 0xFF	; 255
	{
		//set temp
		for(uint8_t br1 = 0; br1 < 7; ++br1)
		{
			temp[br1] = numbers [text[br] - 48][br1];
 11e:	ae 2e       	mov	r10, r30
 120:	91 2e       	mov	r9, r17
 122:	0f 2e       	mov	r0, r31
 124:	f0 e2       	ldi	r31, 0x20	; 32
 126:	cf 2e       	mov	r12, r31
 128:	f1 e0       	ldi	r31, 0x01	; 1
 12a:	df 2e       	mov	r13, r31
 12c:	f0 2d       	mov	r31, r0
 12e:	4e e2       	ldi	r20, 0x2E	; 46
 130:	51 e0       	ldi	r21, 0x01	; 1


void SetBufer()
{
	uint8_t temp[7] = {0};
	for(uint8_t br = 0; br < strlen(text); ++br)
 132:	17 c0       	rjmp	.+46     	; 0x162 <SetBufer+0x9a>
	{
		//set temp
		for(uint8_t br1 = 0; br1 < 7; ++br1)
		{
			temp[br1] = numbers [text[br] - 48][br1];
 134:	8d 90       	ld	r8, X+
 136:	81 92       	st	Z+, r8
{
	uint8_t temp[7] = {0};
	for(uint8_t br = 0; br < strlen(text); ++br)
	{
		//set temp
		for(uint8_t br1 = 0; br1 < 7; ++br1)
 138:	e6 17       	cp	r30, r22
 13a:	f7 07       	cpc	r31, r23
 13c:	d9 f7       	brne	.-10     	; 0x134 <SetBufer+0x6c>
 13e:	d6 01       	movw	r26, r12
		}
		
		//set bufer
		for (uint8_t br1 = 0; br1 < 7; ++br1)
		{
			bufer[br1] = (temp[br1] << (shiftNum - 4));
 140:	fc 01       	movw	r30, r24
 142:	81 90       	ld	r8, Z+
 144:	cf 01       	movw	r24, r30
 146:	e8 2d       	mov	r30, r8
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	02 2e       	mov	r0, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <SetBufer+0x8a>
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <SetBufer+0x86>
 156:	ed 93       	st	X+, r30
 158:	fd 93       	st	X+, r31
		{
			temp[br1] = numbers [text[br] - 48][br1];
		}
		
		//set bufer
		for (uint8_t br1 = 0; br1 < 7; ++br1)
 15a:	a4 17       	cp	r26, r20
 15c:	b5 07       	cpc	r27, r21
 15e:	81 f7       	brne	.-32     	; 0x140 <SetBufer+0x78>


void SetBufer()
{
	uint8_t temp[7] = {0};
	for(uint8_t br = 0; br < strlen(text); ++br)
 160:	b3 94       	inc	r11
 162:	f7 01       	movw	r30, r14
 164:	01 90       	ld	r0, Z+
 166:	00 20       	and	r0, r0
 168:	e9 f7       	brne	.-6      	; 0x164 <SetBufer+0x9c>
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	cf 01       	movw	r24, r30
 16e:	80 50       	subi	r24, 0x00	; 0
 170:	91 40       	sbci	r25, 0x01	; 1
 172:	eb 2d       	mov	r30, r11
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e8 17       	cp	r30, r24
 178:	f9 07       	cpc	r31, r25
 17a:	a0 f4       	brcc	.+40     	; 0x1a4 <SetBufer+0xdc>
	{
		//set temp
		for(uint8_t br1 = 0; br1 < 7; ++br1)
		{
			temp[br1] = numbers [text[br] - 48][br1];
 17c:	e0 50       	subi	r30, 0x00	; 0
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	80 81       	ld	r24, Z
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	c0 97       	sbiw	r24, 0x30	; 48
 186:	dc 01       	movw	r26, r24
 188:	aa 0f       	add	r26, r26
 18a:	bb 1f       	adc	r27, r27
 18c:	aa 0f       	add	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	aa 0f       	add	r26, r26
 192:	bb 1f       	adc	r27, r27
 194:	a8 1b       	sub	r26, r24
 196:	b9 0b       	sbc	r27, r25
 198:	ad 5f       	subi	r26, 0xFD	; 253
 19a:	be 4f       	sbci	r27, 0xFE	; 254
 19c:	c8 01       	movw	r24, r16
 19e:	ea 2d       	mov	r30, r10
 1a0:	f9 2d       	mov	r31, r9
 1a2:	c8 cf       	rjmp	.-112    	; 0x134 <SetBufer+0x6c>
		{
			bufer[br1] = (temp[br1] << (shiftNum - 4));
		}
		 
	}
}
 1a4:	27 96       	adiw	r28, 0x07	; 7
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	df 90       	pop	r13
 1be:	cf 90       	pop	r12
 1c0:	bf 90       	pop	r11
 1c2:	af 90       	pop	r10
 1c4:	9f 90       	pop	r9
 1c6:	8f 90       	pop	r8
 1c8:	08 95       	ret

000001ca <TurnOnRow>:



void TurnOnRow(uint8_t row)
{
	PORTB &= allRows[ERASE];
 1ca:	95 b1       	in	r25, 0x05	; 5
 1cc:	90 7f       	andi	r25, 0xF0	; 240
 1ce:	95 b9       	out	0x05, r25	; 5
	PORTB |= allRows[row];
 1d0:	95 b1       	in	r25, 0x05	; 5
 1d2:	e8 2f       	mov	r30, r24
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	e8 5e       	subi	r30, 0xE8	; 232
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 81       	ld	r24, Z
 1dc:	89 2b       	or	r24, r25
 1de:	85 b9       	out	0x05, r24	; 5
 1e0:	08 95       	ret

000001e2 <PutData>:
}


void PutData(uint8_t data)
{
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	c0 e0       	ldi	r28, 0x00	; 0
 1ec:	d0 e0       	ldi	r29, 0x00	; 0
	//acording to Vajda
	for(uint8_t br = 0; br < 16; ++br)
	{
		if(data & (1 << br))
 1ee:	08 2f       	mov	r16, r24
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	98 01       	movw	r18, r16
 1f4:	0c 2e       	mov	r0, r28
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <PutData+0x1a>
 1f8:	35 95       	asr	r19
 1fa:	27 95       	ror	r18
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <PutData+0x16>
 200:	20 ff       	sbrs	r18, 0
 202:	04 c0       	rjmp	.+8      	; 0x20c <PutData+0x2a>
		Shift(1);
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 53 00 	call	0xa6	; 0xa6 <Shift>
 20a:	03 c0       	rjmp	.+6      	; 0x212 <PutData+0x30>
		else
		Shift(0);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 53 00 	call	0xa6	; 0xa6 <Shift>
 212:	21 96       	adiw	r28, 0x01	; 1


void PutData(uint8_t data)
{
	//acording to Vajda
	for(uint8_t br = 0; br < 16; ++br)
 214:	c0 31       	cpi	r28, 0x10	; 16
 216:	d1 05       	cpc	r29, r1
 218:	61 f7       	brne	.-40     	; 0x1f2 <PutData+0x10>
		if(data & (1 << br))
		Shift(1);
		else
		Shift(0);
	}
	PORTB |= (1 << RCK);
 21a:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(1 << RCK);
 21c:	2c 98       	cbi	0x05, 4	; 5
	} 
	
	PORTB |= (1 << RCK);
	PORTB &= ~(1 << SERIN);
	PORTC &= ~(1 << SRCK);*/
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <main>:

int main()
{
	
	//setup
	DDRB = 0xFF;
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << 5);
 22c:	3d 9a       	sbi	0x07, 5	; 7
	clear();
 22e:	0e 94 5b 00 	call	0xb6	; 0xb6 <clear>
 232:	0f 2e       	mov	r0, r31
 234:	f0 e2       	ldi	r31, 0x20	; 32
 236:	ef 2e       	mov	r14, r31
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	ff 2e       	mov	r15, r31
 23c:	f0 2d       	mov	r31, r0
	
	while(1)
	{
			for(uint8_t br = 0; br < 7; ++br)
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	87 01       	movw	r16, r14
 242:	cd 2f       	mov	r28, r29
			{
				SetBufer();
 244:	0e 94 64 00 	call	0xc8	; 0xc8 <SetBufer>
				PutData(bufer[br]);
 248:	f8 01       	movw	r30, r16
 24a:	80 81       	ld	r24, Z
 24c:	0e 5f       	subi	r16, 0xFE	; 254
 24e:	1f 4f       	sbci	r17, 0xFF	; 255
 250:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <PutData>
				TurnOnRow(br);
 254:	8c 2f       	mov	r24, r28
 256:	0e 94 e5 00 	call	0x1ca	; 0x1ca <TurnOnRow>
	DDRC |= (1 << 5);
	clear();
	
	while(1)
	{
			for(uint8_t br = 0; br < 7; ++br)
 25a:	cf 5f       	subi	r28, 0xFF	; 255
 25c:	c7 30       	cpi	r28, 0x07	; 7
 25e:	91 f7       	brne	.-28     	; 0x244 <main+0x1c>
 260:	ef cf       	rjmp	.-34     	; 0x240 <main+0x18>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
