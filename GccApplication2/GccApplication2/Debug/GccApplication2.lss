
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000156  000001ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000156  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000021c  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000148  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000193  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000178  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000162  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000ae6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e5       	ldi	r30, 0x56	; 86
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  8e:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <Shift>:
#define ERASE 7


void Shift(uint8_t state)
{
	if(state)
  96:	88 23       	and	r24, r24
  98:	11 f0       	breq	.+4      	; 0x9e <Shift+0x8>
		PORTB |= (1 << SERIN);
  9a:	2d 9a       	sbi	0x05, 5	; 5
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <Shift+0xa>
	else
		PORTB &= ~(1 << SERIN);
  9e:	2d 98       	cbi	0x05, 5	; 5
		
	PORTC |= (1 << SRCK);
  a0:	45 9a       	sbi	0x08, 5	; 8
	PORTC &= ~(1 << SRCK);
  a2:	45 98       	cbi	0x08, 5	; 8
  a4:	08 95       	ret

000000a6 <clear>:
}


void clear()
{
  a6:	cf 93       	push	r28
  a8:	c0 e1       	ldi	r28, 0x10	; 16
	for(uint8_t br = 0; br < 16; ++br)
	{
		Shift(0);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 4b 00 	call	0x96	; 0x96 <Shift>
  b0:	c1 50       	subi	r28, 0x01	; 1
}


void clear()
{
	for(uint8_t br = 0; br < 16; ++br)
  b2:	d9 f7       	brne	.-10     	; 0xaa <clear+0x4>
	{
		Shift(0);
	}
}
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <TurnOnRow>:


void TurnOnRow(uint8_t row)
{
	PORTB &= allRows[ERASE];
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	95 b9       	out	0x05, r25	; 5
	PORTB |= allRows[row];
  be:	95 b1       	in	r25, 0x05	; 5
  c0:	e8 2f       	mov	r30, r24
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	eb 5e       	subi	r30, 0xEB	; 235
  c6:	fe 4f       	sbci	r31, 0xFE	; 254
  c8:	80 81       	ld	r24, Z
  ca:	89 2b       	or	r24, r25
  cc:	85 b9       	out	0x05, r24	; 5
  ce:	08 95       	ret

000000d0 <PutData>:
}


void PutData(uint8_t data)
{
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	c0 e0       	ldi	r28, 0x00	; 0
  da:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t br = 0; br < 16; ++br)
	{
		if(data & (1 << br))
  dc:	08 2f       	mov	r16, r24
  de:	10 e0       	ldi	r17, 0x00	; 0
  e0:	98 01       	movw	r18, r16
  e2:	0c 2e       	mov	r0, r28
  e4:	02 c0       	rjmp	.+4      	; 0xea <PutData+0x1a>
  e6:	35 95       	asr	r19
  e8:	27 95       	ror	r18
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <PutData+0x16>
  ee:	20 ff       	sbrs	r18, 0
  f0:	04 c0       	rjmp	.+8      	; 0xfa <PutData+0x2a>
		Shift(1);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 4b 00 	call	0x96	; 0x96 <Shift>
  f8:	03 c0       	rjmp	.+6      	; 0x100 <PutData+0x30>
		else
		Shift(0);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <Shift>
 100:	21 96       	adiw	r28, 0x01	; 1
}


void PutData(uint8_t data)
{
	for(uint8_t br = 0; br < 16; ++br)
 102:	c0 31       	cpi	r28, 0x10	; 16
 104:	d1 05       	cpc	r29, r1
 106:	61 f7       	brne	.-40     	; 0xe0 <PutData+0x10>
		if(data & (1 << br))
		Shift(1);
		else
		Shift(0);
	}
	PORTB |= (1 << RCK);
 108:	2c 9a       	sbi	0x05, 4	; 5
	PORTB &= ~(1 << RCK);	
 10a:	2c 98       	cbi	0x05, 4	; 5
}
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	08 95       	ret

00000116 <main>:

int main()
{
	
	//setup
	DDRB = 0xFF;
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << 5);
 11a:	3d 9a       	sbi	0x07, 5	; 7
	clear();
 11c:	0e 94 53 00 	call	0xa6	; 0xa6 <clear>
 120:	0f 2e       	mov	r0, r31
 122:	fe e0       	ldi	r31, 0x0E	; 14
 124:	ef 2e       	mov	r14, r31
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	ff 2e       	mov	r15, r31
 12a:	f0 2d       	mov	r31, r0
 12c:	0f 2e       	mov	r0, r31
 12e:	f5 e1       	ldi	r31, 0x15	; 21
 130:	cf 2e       	mov	r12, r31
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	df 2e       	mov	r13, r31
 136:	f0 2d       	mov	r31, r0
	PORTB &= ~(1 << RCK);	
}


int main()
{
 138:	e7 01       	movw	r28, r14
 13a:	1c 2f       	mov	r17, r28
 13c:	1e 19       	sub	r17, r14
	
	while(1)
	{
			for(uint8_t br = 0; br < 7; ++br)
			{
				PutData(numbers[2][br]);
 13e:	89 91       	ld	r24, Y+
 140:	0e 94 68 00 	call	0xd0	; 0xd0 <PutData>
				TurnOnRow(br);
 144:	81 2f       	mov	r24, r17
 146:	0e 94 5c 00 	call	0xb8	; 0xb8 <TurnOnRow>
	DDRC |= (1 << 5);
	clear();
	
	while(1)
	{
			for(uint8_t br = 0; br < 7; ++br)
 14a:	cc 15       	cp	r28, r12
 14c:	dd 05       	cpc	r29, r13
 14e:	a9 f7       	brne	.-22     	; 0x13a <main+0x24>
 150:	f3 cf       	rjmp	.-26     	; 0x138 <main+0x22>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
